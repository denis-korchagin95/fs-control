#!/usr/bin/env php
<?php
/*
 * This file is part of fs-control.
 *
 * (c) Denis Korchagin <denis.korchagin.1995@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

# find the composer autoload path
if (isset($GLOBALS['_composer_autoload_path'])) {
    define('FS_CONTROL_AUTOLOAD_PATH', $GLOBALS['_composer_autoload_path']);

    unset($GLOBALS['_composer_autoload_path']);
} else {
    $autoloadPaths = [
        __DIR__ . '/../../autoload.php',
        __DIR__ . '/../vendor/autoload.php',
        __DIR__ . '/vendor/autoload.php',
    ];
    foreach ($autoloadPaths as $autoloadPath) {
        if (file_exists($autoloadPath)) {
            define('FS_CONTROL_AUTOLOAD_PATH', $autoloadPath);
            break;
        }
    }
    unset($autoloadPaths);
}

if (!defined('FS_CONTROL_AUTOLOAD_PATH')) {
    fwrite(
        STDERR,
        'You should set up the project via Composer project correctly. '
        . 'Please go and check to do this here https://getcomposer.org/.'
        . PHP_EOL
    );
    die(1);
}

require FS_CONTROL_AUTOLOAD_PATH;

use FsControl\Core\Application;
use FsControl\Exception\ConfigurationLoaderException;
use FsControl\Exception\FsControlException;
use FsControl\Loader\ConfigurationLoader;
use FsControl\Loader\DirectoryTreeLoader;

const CLI_CODE_OK = 0;
const CLI_CODE_GENERAL_ERROR = 1;
const CLI_CODE_VIOLATION_PATHS = 2;
const CLI_CODE_UNCOVERED_PATHS = 3;
const CLI_CODE_UNBOUNDED_PATHS = 4;
const CLI_CODE_EXTENSION_ERROR = 5;
const VERSION = '1.2.0';

$configFile = null;

$showUncoveredPaths = false;
$showUnboundedPaths = false;
$showExcludedPaths = false;
$showAllowedPaths = false;
$showBoundedPaths = false;
$failOnUncoveredPaths = false;
$failOnUnboundedPaths = false;
$isNeedToShowHelp = false;
$isNeedToShowVersion = false;
$explain = false;

foreach ($argv as $index => $argument) {
    if ($index === 0) {
        continue;
    }
    if ($argument === '--help') {
        $isNeedToShowHelp = true;
        break;
    }
    if ($argument === '--version') {
        $isNeedToShowVersion = true;
        break;
    }
    if ($argument === '--show-uncovered-paths') {
        $showUncoveredPaths = true;
        continue;
    }
    if ($argument === '--show-unbounded-paths') {
        $showUnboundedPaths = true;
        continue;
    }
    if ($argument === '--show-excluded-paths') {
        $showExcludedPaths = true;
        continue;
    }
    if ($argument === '--show-allowed-paths') {
        $showAllowedPaths = true;
        continue;
    }
    if ($argument === '--show-bounded-paths') {
        $showBoundedPaths = true;
        continue;
    }
    if ($argument === '--fail-on-uncovered-paths') {
        $failOnUncoveredPaths = true;
        continue;
    }
    if ($argument === '--fail-on-unbounded-paths') {
        $failOnUnboundedPaths = true;
        continue;
    }
    if ($argument === '--explain') {
        $explain = true;
        continue;
    }
    if (str_starts_with($argument, '--')) {
        fwrite(STDERR, 'Unexpected option "' . $argument . '"!' . PHP_EOL);
        exit(CLI_CODE_GENERAL_ERROR);
    }
    if ($configFile !== null) {
        fwrite(STDERR, 'Expected only one config file but another one given "' . $argument . '"!' . PHP_EOL);
        exit(CLI_CODE_GENERAL_ERROR);
    }
    $configFile = $argument;
}

if ($isNeedToShowHelp) {
    fwrite(STDOUT, <<<OUTPUT
Usage: fs-control [FILE] [OPTION]...

Options:
        --help                     Displays this usage information
        --version                  Displays the version
        --show-uncovered-paths     Show uncovered paths (out of rules)
        --show-unbounded-paths     Show unbounded paths (not configured for tool in binding section)
        --show-excluded-paths      Show excluded paths
        --show-allowed-paths       Show allowed paths
        --show-bounded-paths       Show bounded paths
        --fail-on-uncovered-paths  Treat uncovered paths as failures
        --fail-on-unbounded-paths  Treat unbounded paths as failures
        --explain                  Explains why each path is in its category


OUTPUT
    );
    exit(CLI_CODE_OK);
}

if ($isNeedToShowVersion) {
    fwrite(STDERR, 'fs-control ' . VERSION . PHP_EOL);
    exit(CLI_CODE_OK);
}

$directoryTreeLoader = new DirectoryTreeLoader(['.git']);
$configurationLoader = new ConfigurationLoader();
try {
    if ($configFile === null) {
        throw new ConfigurationLoaderException('Expected a config file!');
    }
    $resolvedConfigFile = realpath($configFile);
    if ($resolvedConfigFile === false) {
        throw new ConfigurationLoaderException('The invalid config file "' . $configFile . '"!');
    }
    $configuration = $configurationLoader->loadFromFile($resolvedConfigFile);
    $application = new Application($directoryTreeLoader, $configuration);
    $result = $application->run();
} catch (FsControlException $exception) {
    fwrite(STDERR, $exception->getMessage() . PHP_EOL);
    exit(CLI_CODE_GENERAL_ERROR);
}

if ($result->hasViolationPaths()) {
    fwrite(STDOUT, 'Violation Paths:' . PHP_EOL);
    foreach ($result->getViolationPaths() as $pathInfo) {
        fwrite(STDOUT, $pathInfo['path'] . PHP_EOL);
        if ($explain) {
            fwrite(STDOUT, '  ' . $pathInfo['reason'] . PHP_EOL . PHP_EOL);
        }
    }
    fwrite(STDOUT, PHP_EOL);
}

if (
    (
        $showUncoveredPaths
        || $failOnUncoveredPaths
    )
    && $result->hasUncoveredPaths()
) {
    fwrite(STDOUT, 'Uncovered Paths:' . PHP_EOL);
    foreach ($result->getUncoveredPaths() as $pathInfo) {
        fwrite(STDOUT, $pathInfo['path'] . PHP_EOL);
        if ($explain) {
            fwrite(STDOUT, '  ' . $pathInfo['description'] . PHP_EOL . PHP_EOL);
        }
    }
    fwrite(STDOUT, PHP_EOL);
}

if (
    (
        $showUnboundedPaths
        || $failOnUnboundedPaths
    )
    && $result->hasUnboundedPaths()
) {
    fwrite(STDOUT, 'Unbounded Paths:' . PHP_EOL);
    foreach ($result->getUnboundedPaths() as $pathInfo) {
        fwrite(STDOUT, $pathInfo['path'] . PHP_EOL);
        if ($explain) {
            fwrite(STDOUT, '  ' . $pathInfo['reason'] . PHP_EOL . PHP_EOL);
        }
    }
    fwrite(STDOUT, PHP_EOL);
}

if (
    $showExcludedPaths
    && $result->hasExcludedPaths()
) {
    fwrite(STDOUT, 'Excluded Paths:' . PHP_EOL);
    foreach ($result->getExcludedPaths() as $pathInfo) {
        fwrite(STDOUT, $pathInfo['path'] . PHP_EOL);
        if ($explain) {
            fwrite(STDOUT, '  ' . $pathInfo['description'] . PHP_EOL . PHP_EOL);
        }
    }
    fwrite(STDOUT, PHP_EOL);
}

if (
    $showBoundedPaths
    && $result->hasBoundedPaths()
) {
    fwrite(STDOUT, 'Bounded Paths:' . PHP_EOL);
    foreach ($result->getBoundedPaths() as $pathInfo) {
        fwrite(STDOUT, $pathInfo['path'] . PHP_EOL);
        if ($explain) {
            fwrite(STDOUT, '  ' . $pathInfo['description'] . PHP_EOL . PHP_EOL);
        }
    }
    fwrite(STDOUT, PHP_EOL);
}

if (
    $showAllowedPaths
    && $result->hasAllowedPaths()
) {
    fwrite(STDOUT, 'Allowed Paths:' . PHP_EOL);
    foreach ($result->getAllowedPaths() as $pathInfo) {
        fwrite(STDOUT, $pathInfo['path'] . PHP_EOL);
        if ($explain) {
            fwrite(STDOUT, '  ' . $pathInfo['description'] . PHP_EOL . PHP_EOL);
        }
    }
    fwrite(STDOUT, PHP_EOL);
}

fwrite(STDOUT, 'Violation Paths: ' . $result->getViolationPathCount() . PHP_EOL);
fwrite(STDOUT, 'Uncovered Paths: ' . $result->getUncoveredPathCount() . PHP_EOL);
fwrite(STDOUT, 'Unbounded Paths: ' . $result->getUnboundedPathCount() . PHP_EOL);
fwrite(STDOUT, 'Excluded Paths: ' . $result->getExcludedPathCount() . PHP_EOL);
fwrite(STDOUT, 'Bounded Paths: ' . $result->getBoundedPathCount() . PHP_EOL);
fwrite(STDOUT, 'Allowed Paths: ' . $result->getAllowedPathCount() . PHP_EOL);

$returnCode = $result->hasViolationPaths() ? CLI_CODE_VIOLATION_PATHS : CLI_CODE_OK;

if (
    $returnCode === CLI_CODE_OK
    && $failOnUncoveredPaths
    && $result->hasUncoveredPaths()
) {
    $returnCode = CLI_CODE_UNCOVERED_PATHS;
}
if (
    $returnCode === CLI_CODE_OK
    && $failOnUnboundedPaths
    && $result->hasUnboundedPaths()
) {
    $returnCode = CLI_CODE_UNBOUNDED_PATHS;
}

$isTerminateSucceed = $application->terminate(STDOUT);

if (
    $returnCode === CLI_CODE_OK
    && !$isTerminateSucceed
) {
    $returnCode = CLI_CODE_EXTENSION_ERROR;
}

exit($returnCode);
