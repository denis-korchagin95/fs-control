#!/usr/bin/env php
<?php
/*
 * This file is part of fs-control.
 *
 * (c) Denis Korchagin <denis.korchagin.1995@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

# find the composer autoload path
if (isset($GLOBALS['_composer_autoload_path'])) {
    define('FS_CONTROL_AUTOLOAD_PATH', $GLOBALS['_composer_autoload_path']);

    unset($GLOBALS['_composer_autoload_path']);
} else {
    $autoloadPaths = [
        __DIR__ . '/../../autoload.php',
        __DIR__ . '/../vendor/autoload.php',
        __DIR__ . '/vendor/autoload.php',
    ];
    foreach ($autoloadPaths as $autoloadPath) {
        if (file_exists($autoloadPath)) {
            define('FS_CONTROL_AUTOLOAD_PATH', $autoloadPath);
            break;
        }
    }
    unset($autoloadPaths);
}

if (!defined('FS_CONTROL_AUTOLOAD_PATH')) {
    fwrite(
        STDERR,
        'You should set up the project via Composer project correctly. '
        . 'Please go and check to do this here https://getcomposer.org/.'
        . PHP_EOL
    );
    die(1);
}

require FS_CONTROL_AUTOLOAD_PATH;

use FsControl\Core\Application;
use FsControl\Exception\ConfigurationLoaderException;
use FsControl\Exception\FsControlException;
use FsControl\Loader\ConfigurationLoader;
use FsControl\Loader\DirectoryTreeLoader;

const CLI_CODE_OK = 0;
const CLI_CODE_GENERAL_ERROR = 1;
const CLI_CODE_VIOLATION_PATHS = 2;
const CLI_CODE_UNCOVERED_PATHS = 3;

$configFile = null;

$showUncoveredPaths = false;
$showUnboundedPaths = false;
$failOnUncoveredPaths = false;
$isNeedToShowHelp = false;

foreach ($argv as $index => $argument) {
    if ($index === 0) {
        continue;
    }
    if ($argument === '--help') {
        $isNeedToShowHelp = true;
        break;
    }
    if ($argument === '--show-uncovered-paths') {
        $showUncoveredPaths = true;
        continue;
    }
    if ($argument === '--show-unbounded-paths') {
        $showUnboundedPaths = true;
        continue;
    }
    if ($argument === '--fail-on-uncovered-paths') {
        $failOnUncoveredPaths = true;
        continue;
    }
    if (str_starts_with($argument, '--')) {
        fwrite(STDERR, 'Unexpected option "' . $argument . '"!' . PHP_EOL);
        exit(CLI_CODE_GENERAL_ERROR);
    }
    if ($configFile !== null) {
        fwrite(STDERR, 'Expected only one config file but another one given "' . $argument . '"!' . PHP_EOL);
        exit(CLI_CODE_GENERAL_ERROR);
    }
    $configFile = $argument;
}

if ($isNeedToShowHelp) {
    fwrite(STDOUT, 'Usage: ' . basename($argv[0]) . ' [FILE] [OPTION]...' . PHP_EOL);
    fwrite(STDOUT, PHP_EOL);
    fwrite(STDOUT, 'Options:' . PHP_EOL);
    $options = [
        '--help' => 'Displays help message',
        '--show-uncovered-paths' => 'Show uncovered paths (out of rules)',
        '--show-unbounded-paths' => 'Show unbounded paths (not configured for tool in binding section)',
        '--fail-on-uncovered-paths' => 'Treat uncovered paths as failures',
    ];
    $maxPadCount = 0;
    foreach (array_keys($options) as $option) {
        $optionCharCount = strlen($option);
        if ($optionCharCount > $maxPadCount) {
            $maxPadCount = $optionCharCount;
        }
    }
    foreach ($options as $option => $description) {
        $option = str_pad($option, $maxPadCount + 2);
        fwrite(STDOUT, "\t" . $option . $description . PHP_EOL);
    }
    exit(CLI_CODE_OK);
}

$directoryTreeLoader = new DirectoryTreeLoader(['.git']);
$configurationLoader = new ConfigurationLoader();
try {
    if ($configFile === null) {
        throw new ConfigurationLoaderException('Expected a config file!');
    }
    $resolvedConfigFile = realpath($configFile);
    if ($resolvedConfigFile === false) {
        throw new ConfigurationLoaderException('The invalid config file "' . $configFile . '"!');
    }
    $configuration = $configurationLoader->loadFromFile($resolvedConfigFile);
    $result = (new Application($directoryTreeLoader))->run($configuration);
} catch (FsControlException $exception) {
    fwrite(STDERR, $exception->getMessage() . PHP_EOL);
    exit(CLI_CODE_GENERAL_ERROR);
}

if ($result->hasViolationPaths()) {
    echo 'Violation Paths:' , PHP_EOL;
    foreach ($result->getViolationPaths() as $violationPath) {
        echo $violationPath, PHP_EOL;
    }
    echo PHP_EOL;
}

if (
        ($showUncoveredPaths || $failOnUncoveredPaths)
        && $result->hasUncoveredPaths()
) {
    echo 'Uncovered Paths:' , PHP_EOL;
    foreach ($result->getUncoveredPaths() as $uncoveredPath) {
        echo $uncoveredPath, PHP_EOL;
    }
    echo PHP_EOL;
}

if ($showUnboundedPaths && $result->hasUnboundedPaths()) {
    echo 'Unbounded Paths:' , PHP_EOL;
    foreach ($result->getUnboundedPaths() as $uncoveredPath) {
        echo $uncoveredPath, PHP_EOL;
    }
    echo PHP_EOL;
}

echo 'Violation Paths: ', $result->getViolationPathCount(), PHP_EOL;
echo 'Uncovered Paths: ', $result->getUncoveredPathCount(), PHP_EOL;
echo 'Unbounded Paths: ', $result->getUnboundedPathCount(), PHP_EOL;
echo 'Allowed Paths: ', $result->getAllowedPathCount(), PHP_EOL;
echo 'Bounded Paths: ', $result->getBoundedPathCount(), PHP_EOL;

$returnCode = $result->hasViolationPaths() ? CLI_CODE_VIOLATION_PATHS : CLI_CODE_OK;

if ($returnCode === CLI_CODE_OK && $failOnUncoveredPaths && $result->hasUncoveredPaths()) {
    $returnCode = CLI_CODE_UNCOVERED_PATHS;
}

exit($returnCode);
